// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"SFGPL-End/biz/model"
)

func newProgram(db *gorm.DB, opts ...gen.DOOption) program {
	_program := program{}

	_program.programDo.UseDB(db, opts...)
	_program.programDo.UseModel(&model.Program{})

	tableName := _program.programDo.TableName()
	_program.ALL = field.NewAsterisk(tableName)
	_program.ID = field.NewInt32(tableName, "id")
	_program.Title = field.NewString(tableName, "title")
	_program.View = field.NewString(tableName, "view")
	_program.ActorID = field.NewInt32(tableName, "actor_id")
	_program.CategorieID = field.NewInt32(tableName, "categorie_id")
	_program.UpdeateTine = field.NewTime(tableName, "updeate_tine")
	_program.CreateTime = field.NewTime(tableName, "create_time")
	_program.IsDeleted = field.NewField(tableName, "is_deleted")

	_program.fillFieldMap()

	return _program
}

type program struct {
	programDo

	ALL         field.Asterisk
	ID          field.Int32  // 书籍id
	Title       field.String // 书籍名
	View        field.String // 书籍简介
	ActorID     field.Int32  // 作者id
	CategorieID field.Int32  // 分类id
	UpdeateTine field.Time   // 更新时间
	CreateTime  field.Time   // 创建时间
	IsDeleted   field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (p program) Table(newTableName string) *program {
	p.programDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p program) As(alias string) *program {
	p.programDo.DO = *(p.programDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *program) updateTableName(table string) *program {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.Title = field.NewString(table, "title")
	p.View = field.NewString(table, "view")
	p.ActorID = field.NewInt32(table, "actor_id")
	p.CategorieID = field.NewInt32(table, "categorie_id")
	p.UpdeateTine = field.NewTime(table, "updeate_tine")
	p.CreateTime = field.NewTime(table, "create_time")
	p.IsDeleted = field.NewField(table, "is_deleted")

	p.fillFieldMap()

	return p
}

func (p *program) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *program) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["id"] = p.ID
	p.fieldMap["title"] = p.Title
	p.fieldMap["view"] = p.View
	p.fieldMap["actor_id"] = p.ActorID
	p.fieldMap["categorie_id"] = p.CategorieID
	p.fieldMap["updeate_tine"] = p.UpdeateTine
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["is_deleted"] = p.IsDeleted
}

func (p program) clone(db *gorm.DB) program {
	p.programDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p program) replaceDB(db *gorm.DB) program {
	p.programDo.ReplaceDB(db)
	return p
}

type programDo struct{ gen.DO }

type IProgramDo interface {
	gen.SubQuery
	Debug() IProgramDo
	WithContext(ctx context.Context) IProgramDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProgramDo
	WriteDB() IProgramDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProgramDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProgramDo
	Not(conds ...gen.Condition) IProgramDo
	Or(conds ...gen.Condition) IProgramDo
	Select(conds ...field.Expr) IProgramDo
	Where(conds ...gen.Condition) IProgramDo
	Order(conds ...field.Expr) IProgramDo
	Distinct(cols ...field.Expr) IProgramDo
	Omit(cols ...field.Expr) IProgramDo
	Join(table schema.Tabler, on ...field.Expr) IProgramDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProgramDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProgramDo
	Group(cols ...field.Expr) IProgramDo
	Having(conds ...gen.Condition) IProgramDo
	Limit(limit int) IProgramDo
	Offset(offset int) IProgramDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProgramDo
	Unscoped() IProgramDo
	Create(values ...*model.Program) error
	CreateInBatches(values []*model.Program, batchSize int) error
	Save(values ...*model.Program) error
	First() (*model.Program, error)
	Take() (*model.Program, error)
	Last() (*model.Program, error)
	Find() ([]*model.Program, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Program, err error)
	FindInBatches(result *[]*model.Program, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Program) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProgramDo
	Assign(attrs ...field.AssignExpr) IProgramDo
	Joins(fields ...field.RelationField) IProgramDo
	Preload(fields ...field.RelationField) IProgramDo
	FirstOrInit() (*model.Program, error)
	FirstOrCreate() (*model.Program, error)
	FindByPage(offset int, limit int) (result []*model.Program, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProgramDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p programDo) Debug() IProgramDo {
	return p.withDO(p.DO.Debug())
}

func (p programDo) WithContext(ctx context.Context) IProgramDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p programDo) ReadDB() IProgramDo {
	return p.Clauses(dbresolver.Read)
}

func (p programDo) WriteDB() IProgramDo {
	return p.Clauses(dbresolver.Write)
}

func (p programDo) Session(config *gorm.Session) IProgramDo {
	return p.withDO(p.DO.Session(config))
}

func (p programDo) Clauses(conds ...clause.Expression) IProgramDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p programDo) Returning(value interface{}, columns ...string) IProgramDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p programDo) Not(conds ...gen.Condition) IProgramDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p programDo) Or(conds ...gen.Condition) IProgramDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p programDo) Select(conds ...field.Expr) IProgramDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p programDo) Where(conds ...gen.Condition) IProgramDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p programDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IProgramDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p programDo) Order(conds ...field.Expr) IProgramDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p programDo) Distinct(cols ...field.Expr) IProgramDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p programDo) Omit(cols ...field.Expr) IProgramDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p programDo) Join(table schema.Tabler, on ...field.Expr) IProgramDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p programDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProgramDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p programDo) RightJoin(table schema.Tabler, on ...field.Expr) IProgramDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p programDo) Group(cols ...field.Expr) IProgramDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p programDo) Having(conds ...gen.Condition) IProgramDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p programDo) Limit(limit int) IProgramDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p programDo) Offset(offset int) IProgramDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p programDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProgramDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p programDo) Unscoped() IProgramDo {
	return p.withDO(p.DO.Unscoped())
}

func (p programDo) Create(values ...*model.Program) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p programDo) CreateInBatches(values []*model.Program, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p programDo) Save(values ...*model.Program) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p programDo) First() (*model.Program, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Program), nil
	}
}

func (p programDo) Take() (*model.Program, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Program), nil
	}
}

func (p programDo) Last() (*model.Program, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Program), nil
	}
}

func (p programDo) Find() ([]*model.Program, error) {
	result, err := p.DO.Find()
	return result.([]*model.Program), err
}

func (p programDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Program, err error) {
	buf := make([]*model.Program, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p programDo) FindInBatches(result *[]*model.Program, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p programDo) Attrs(attrs ...field.AssignExpr) IProgramDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p programDo) Assign(attrs ...field.AssignExpr) IProgramDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p programDo) Joins(fields ...field.RelationField) IProgramDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p programDo) Preload(fields ...field.RelationField) IProgramDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p programDo) FirstOrInit() (*model.Program, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Program), nil
	}
}

func (p programDo) FirstOrCreate() (*model.Program, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Program), nil
	}
}

func (p programDo) FindByPage(offset int, limit int) (result []*model.Program, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p programDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p programDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p programDo) Delete(models ...*model.Program) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *programDo) withDO(do gen.Dao) *programDo {
	p.DO = *do.(*gen.DO)
	return p
}
